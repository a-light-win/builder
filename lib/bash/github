#!/usr/bin/env bash

github_upload_retry_times=3
github_upload_retry_interval=5

github-release() {
  local -n assets_url_ref__=$1
  local repo="$2"
  local version="$PKG_VERSION"

  _github-validate-release-input "${repo}" || return $?

  assets_url_ref__=$(
    gh api \
      -H "Accept: application/vnd.github+json" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      "/repos/${repo}/releases/tags/${version}" \
      --jq ".assets_url"
  )

  if [ $? -eq 0 ] && [ -n "${assets_url_ref__}" ]; then
    # Do not create a new release if the release already exists
    return 0
  fi

  assets_url_ref__=$(
    gh api \
      --method POST \
      -H "Accept: application/vnd.github+json" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      /repos/"${repo}"/releases \
      -f "tag_name=${version}" \
      -f "name=${version}" \
      -F "draft=false" \
      -F "prerelease=true" \
      -F "generate_release_notes=true" \
      --jq ".assets_url"
  )

  if [ $? -ne 0 ] || [ -z "${assets_url_ref__}" ]; then
    return 1
  fi
}

_github-validate-release-input() {
  local repo="$1"

  if [ -z "$PKG_VERSION" ]; then
    echo >&2 "PKG_VERSION is required"
    return 1
  fi

  if [ -z "$GITHUB_TOKEN" ]; then
    echo >&2 "GITHUB_TOKEN is required"
    return 1
  fi

  grep -q '^[^\s/!]\+/[^\s/!]\+$' <<<"${repo}"
  if [ $? -ne 0 ]; then
    echo >&2 "repo should be in 'OWNER/REPO' format but got '${repo}'"
    return 1
  fi

  return 0
}

# Upload files to the github release page
github-upload() {
  local assets_url="$1"
  local files=("${@:2}")

  if [ "${#files[@]}" -eq 0 ]; then
    echo >&2 "No file to upload"
    exit 1
  fi

  for file in "${files[@]}"; do
    _github-upload-one "${assets_url}" "${file}" || exit $?
  done
}

# Upload one file to github release page
# The function starts with '_' is private to this file,
# do not use it directly, use the 'github-upload' instead.
_github-upload-one() {
  local assets_url="$1"
  local file="$2"

  if [ ! -e "${file}" ]; then
    echo >&2 "File not found: ${file}"
    exit 1
  fi

  local dest="${assets_url}?name=$(basename ${file})"
  echo "Uploading ${file} to ${dest} ..."

  local retries=0
  while [ "$retries" -lt "$github_upload_retry_times" ]; do
    _github-upload-one-internal "${file}" "${dest}" && return 0
    retries="$((retries + 1))"
    sleep "$github_upload_retry_interval"
  done

  echo >&2 "Failed to upload ${file} to ${dest}"
  return 1
}

_github-upload-one-internal() {
  local src="$1"
  local dest="$2"

  local result
  result=$(curl -L \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${GITHUB_TOKEN}" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    -H "Content-Type: application/octet-stream" \
    "$dest" \
    --data-binary "@${src}")
  if [ $? -ne 0 ]; then
    echo "$result"
    return 1
  fi

  grep -q 'Not Found' <<<"${result}"
  if [ $? -eq 0 ]; then
    echo "$result"
    return 1
  fi

  return 0
}
