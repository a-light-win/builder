#!/usr/bin/env bash

podman-run() {
    podman run --rm \
        --env-host \
        -v $(pwd):$(pwd) \
        -w $(pwd) \
        "$@"
}

podman-setup() {
    # debian os family
    which apt-get
    if [ $? -eq 0 ]; then
        echo "Install third-party repository for podman ..."
        echo 'deb http://download.opensuse.org/repositories/home:/alvistack/xUbuntu_24.04/ /' | sudo tee /etc/apt/sources.list.d/home:alvistack.list >/dev/null || return $?
        curl -fsSL https://download.opensuse.org/repositories/home:alvistack/xUbuntu_24.04/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/home_alvistack.gpg >/dev/null || return $?

        export DEBIAN_FRONTEND=noninteractive

        echo "Try to remove the golang-github-containers-common ..."
        sudo apt-get remove -y golang-github-containers-common || reuturn $?
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y

        echo "Install the third-party podman ..."
        sudo apt-get update || return $?
        sudo apt-get install -y podman uidmap netavark passt slirp4netns
        return $?
    fi

    # archlinux
    which pacman
    if [ $? -eq 0 ]; then
        sudo pacman -Sy podman
        return $?
    fi

    echo >&2 "Error: unsupported os family"
    cat /etc/os-release >&2
    return 1
}

podman-parse-annotations() {
    local -n annotations_ref__="$1"

    local labels
    load-array-from-env labels "PKG_LABEL_"
    labels+=("created=$(date -u -Is)")

    annotations_ref__=()
    local label key value
    for label in "${labels[@]}"; do
        IFS='=' read -r key value <<<"$label"
        if [ -z "$key" ] || [ -z "$value" ]; then
            echo >&2 "Invalid label: $label"
            exit 1
        fi

        grep -q "[.]" <<<"$key"
        if [ $? -ne 0 ]; then
            key="org.opencontainers.image.$key"
        fi
        annotations_ref__+=("$key=$value")
    done
}

podman-manifest() {
    _validate-podman-manifest-args || exit $?

    local image="${PKG_IMAGE}:${PKG_VERSION}"
    podman manifest exists "${image}"
    if [ $? -eq 0 ]; then
        echo "Manifest ${image} already exists, skipping"
        exit 0
    fi

    local annotations annotation_opts
    podman-parse-annotations annotations
    make-nargs annotation_opts "--annotation" "${annotations[@]}"

    echo "Creating manifest ${image}"
    podman manifest create "${annotation_opts[@]}" "${image}"
}

podman-manifest-clean() {
    _validate-podman-manifest-args || exit $?
    local image="${PKG_IMAGE}:${PKG_VERSION}"

    if podman manifest exists "${image}"; then
        echo "Cleaning manifest ${image}"
        podman manifest rm "${image}"
    fi
}

_validate-podman-manifest-args() {
    if [ -z "$PKG_IMAGE" ]; then
        echo >&2 "Error: PKG_IMAGE is not set"
        exit 1
    fi
    if [ -z "$PKG_VERSION" ]; then
        echo >&2 "Error: PKG_VERSION is not set"
        exit 1
    fi
}

podman-build() {
    local arch="$1"

    should-skip-arch "$arch" && return 0

    if [ -z "$PKG_IMAGE" ]; then
        echo >&2 "Error: PKG_IMAGE is not set"
        return 1
    fi
    local image="${PKG_IMAGE}:${PKG_VERSION}"

    local build_args build_arg_opts
    load-array-from-env build_args "PKG_BUILD_ARG_"
    make-nargs build_arg_opts "--build-arg" "${build_args[@]}"

    local annotations annotation_opts
    podman-parse-annotations annotations
    make-nargs annotation_opts "--annotation" "${annotations[@]}"

    echo "Building ${image} for ${arch} with build args: ${build_args[*]}"

    podman build --platform "linux/${arch}" \
        --manifest="${image}" \
        "${annotation_opts[@]}" \
        "${build_arg_opts[@]}" .
}

pre-build-image() {
    local arch="$1"

    local module fn
    module=$(basename $(pwd))
    fn="${module}-pre-build-image"

    if declare -f "${fn}" >/dev/null; then
        echo "Running $fn for $arch ..."
        "$fn" "$arch"
        return 0
    fi

    echo "No $fn found, skip pre-build-image action ..."
}

build-arch() {
    local arch="$1"
    local module fn

    module=$(basename $(pwd))
    fn="${module}-build-arch"
    if declare -f "${fn}" >/dev/null; then
        "$fn" "$arch"
        return 0
    fi
    echo "$arch"
}

podman-tag-and-push() {
    podman manifest inspect "${PKG_IMAGE}:${PKG_VERSION}"

    podman manifest push "${PKG_IMAGE}:${PKG_VERSION}"

    if version-is-develop "$PKG_VERSION"; then
        return 0
    fi

    local tag tags
    version-list tags "$PKG_VERSION"
    for tag in "${tags[@]}"; do
        if [ "$tag" = "$PKG_VERSION" ]; then
            continue
        fi
        podman tag "${PKG_IMAGE}:${PKG_VERSION}" "${PKG_IMAGE}:${tag}"
        podman manifest push "${PKG_IMAGE}:${tag}"
    done
}
